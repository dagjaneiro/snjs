import { StandardFile } from 'standard-file-js/lib/standard_file';
export declare class SNComponentManager {
    $uiRunner: any;
    $timeout: any;
    modelManager: any;
    syncManager: any;
    desktopManager: any;
    nativeExtManager: any;
    alertManager: any;
    streamObservers: any[];
    contextStreamObservers: any[];
    activeComponents: any[];
    environment: any;
    platform: any;
    isDesktop: boolean;
    isMobile: boolean;
    permissionDialogs: any[];
    handlers: any[];
    loggingEnabled: any;
    SFJS: StandardFile;
    static ClientDataDomain: string;
    constructor({ modelManager, syncManager, desktopManager, nativeExtManager, alertManager, $uiRunner, $timeout, environment, platform }: {
        modelManager: any;
        syncManager: any;
        desktopManager: any;
        nativeExtManager: any;
        alertManager: any;
        $uiRunner: any;
        $timeout: any;
        environment: any;
        platform: any;
    });
    configureForGeneralUsage(): void;
    configureForNonMobileUsage(): void;
    postActiveThemesToAllComponents(): void;
    getActiveThemes(): any;
    urlsForActiveThemes(): any;
    postActiveThemesToComponent(component: any): void;
    contextItemDidChangeInArea(area: any): void;
    setComponentHidden(component: any, hidden: any): void;
    jsonForItem(item: any, component: any, source?: any): any;
    sendItemsInReply(component: any, items: any, message: any, source?: any): void;
    sendContextItemInReply(component: any, item: any, originalMessage: any, source?: any): void;
    replyToMessage(component: any, originalMessage: any, replyData: any): void;
    sendMessageToComponent(component: any, message: any): void;
    readonly components: any;
    componentsForArea(area: any): any;
    urlForComponent(component: any, offlinePrefix?: string): any;
    componentForUrl(url: any): any;
    componentForSessionKey(key: any): any;
    handleMessage(component: any, message: any): void;
    removePrivatePropertiesFromResponseItems(responseItems: any, component: any, options?: any): void;
    handleStreamItemsMessage(component: any, message: any): void;
    handleStreamContextItemMessage(component: any, message: any): void;
    isItemIdWithinComponentContextJurisdiction(uuid: any, component: any): boolean;
    itemIdsInContextJurisdictionForComponent(component: any): any[];
    handlersForArea(area: any): any[];
    handleSaveItemsMessage(component: any, message: any): Promise<void>;
    handleDuplicateItemMessage(component: any, message: any): void;
    handleCreateItemsMessage(component: any, message: any): void;
    handleDeleteItemsMessage(component: any, message: any): void;
    handleRequestPermissionsMessage(component: any, message: any): void;
    handleSetComponentDataMessage(component: any, message: any): void;
    handleToggleComponentMessage(sourceComponent: any, targetComponent: any, message: any): void;
    toggleComponent(component: any): void;
    handleInstallLocalComponentMessage(sourceComponent: any, message: any): void;
    runWithPermissions(component: any, requiredPermissions: any, runFunction: any): void;
    promptForPermissions(component: any, permissions: any, callback: any): void;
    presentPermissionsDialog(dialog: any): void;
    openModalComponent(component: any): void;
    registerHandler(handler: any): void;
    deregisterHandler(identifier: any): void;
    registerComponentWindow(component: any, componentWindow: any): Promise<void>;
    activateComponent(component: any, dontSync?: boolean): void;
    deactivateComponent(component: any, dontSync?: boolean): void;
    reloadComponent(component: any): Promise<unknown>;
    deleteComponent(component: any): void;
    isComponentActive(component: any): any;
    iframeForComponent(component: any): HTMLIFrameElement | undefined;
    focusChangedForComponent(component: any): void;
    handleSetSizeEvent(component: any, data: any): void;
    editorForNote(note: any): any;
    getDefaultEditor(): void;
    permissionsStringForPermissions(permissions: any, component: any): string;
}
